#!/usr/bin/env python


# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

MAX_FIB_VALUE = 4 * 1000 * 1000

def solve() :
    return sum(even_fib_up_to(MAX_FIB_VALUE))

# Generator which spits out all fibonacci numbers <= n
def fib_up_to(n) :
    prev = 1
    pprev = 0
    val = 1
    while val <= n:
        yield val
        val = prev + pprev
        pprev = prev
        prev = val

# Generator which makes all even fibonacci numbers <= n
def even_fib_up_to(n) :
    for i in fib_up_to(n) :
        if (i & 0x1) == 0 :
            yield i

def generator_to_string(g) :
    gstr = ""
    for i in g :
        gstr += str(i) + ", "
    return gstr

def demo() :
    n = 100
    fib_string = ""

    print "fib_up_to(%d) -> %s" % (n, generator_to_string(fib_up_to(n)))
    print "even_fib_up_to(%d) -> %s" % (n, generator_to_string(even_fib_up_to(n)))

if __name__ == "__main__" :
    print "Sum of even fib. numbers <= %d is %d" % (MAX_FIB_VALUE, solve())



